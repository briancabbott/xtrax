/*
 * Copyright (c) Bosch Software Innovations GmbH 2019.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v2.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v20.html
 *
 * SPDX-License-Identifier: EPL-2.0
 */

package org.eclipse.sw360.antenna.exampleproject

import org.eclipse.sw360.antenna.model.artifact.Artifact;
import org.eclipse.sw360.antenna.model.artifact.facts.DeclaredLicenseInformation;
import org.eclipse.sw360.antenna.model.xml.generated.LicenseInformation;
import org.eclipse.sw360.antenna.model.xml.generated.MatchState;
import org.eclipse.sw360.antenna.drools.DroolsEvaluationResult;

import java.util.List;
import java.util.Optional;

function boolean checkForDeclaredLicense(Artifact artifact, String license) {
    return artifact.askForGet(DeclaredLicenseInformation.class)
            .map(dLicense -> dLicense.evaluate().contains(license))
            .orElse(false);
}

rule "EPL vs GPL"
no-loop true
when
    a1 : Artifact( )
    a2 : Artifact( )
    e : DroolsEvaluationResult( getId() == "multipleArtifacts" )
    eval(checkForDeclaredLicense(a1 ,"EPL 2.0")
    && checkForDeclaredLicense(a2 ,"GPL 2.0"))
then
    modify (e) { addFailedArtifact(a1) }
    modify (e) { addFailedArtifact(a2) }
end