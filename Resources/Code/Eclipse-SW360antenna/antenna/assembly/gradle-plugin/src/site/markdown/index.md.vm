# How to use ${docNameCap} as a Gradle plugin

For Gradle, ${docNameCap}'s tool configuration is contained in an external configuration file, which is expected to have the same format as the plugin configuration of the `${antennaMavenPluginName}`.
Please refer to the documentation of the [Tool Configuration](../tool-configuration.html).

The plugin itself is configured in your `build.gradle` file by adding the following configuration.

```groovy
buildscript{
    repositories {
        jcenter()
        ${antennaGradleRepoAddition}
    }

    dependencies {
        classpath '${antennaMavenGroupId}:${antennaGradlePluginName}:VERSION'
    }
}

plugins {
    id 'java'
}

apply plugin: ${antennaGradleJavaFilename}

tasks.withType(Jar) {
    destinationDir = file("$rootDir/build")
}

repositories {
    jcenter()
}

version '1.0-SNAPSHOT'

AntennaConfiguration{
    toolConfigurationPath 'toolConfiguration.xml'
    debugEnabled = false
}
```

Some additional pointers:

* For Gradle, Maven is optional.
Should you choose to run ${docNameCap} without having the maven environment variable `M2_HOME` set, the mvn dependency tree plugin will not work.
The result could possibly not include some information that could have been useful.
If you choose to run ${docNameCap} with Maven, you need to set the maven environment variable (`M2_HOME` should be set to the maven executable) and add
```xml
<isMavenInstalled>true</isMavenInstalled>
```
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;to the ${docNameCap} configuration in the toolConfiguration.xml.

* All paths must be absolute.

* For technical reasons variables / properties containing dots or hyphens will in general not be rendered correctly in the toolConfiguration.xml

    * No Maven variables can be used (except for `project.build.directory`, `project.build.outputDirectory` and `project.basedir`, since they have been added to the context).

    * Properties with a dot in them, like `${system.password}` or hyphen, like `${system-password}` should be changed to `${systemPassword}` in order to be rendered.

#[[##]]# Adding workflow steps and plugins

It is possible to use workflow steps, knowledge-bases, etc. also if they are not referenced in the assembly.
To do this, the jars need to be added as dependencies to the plugin step of Gradle.
If you have a custom plugin `my-custom-plugin` with groupId `org.mycompany.plugin`, artifactId `my-custom-plugin` and version `VERSION`, modify the `buildscript` part within `build.gradle` as follows:

```groovy
buildscript{
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath 'org.eclipse.sw360.antenna:gradle-plugin:VERSION'
        classpath 'org.mycompany.plugin:my-custom-plugin:VERSION'
    }
}
```

#[[##]]# Adding entry values over a properties file or environment variables

Sometimes a workflow step contains entries with variables that are credentials or should remain secret due to other reasons.

#[[####]]# Properties file

For that ${docNameCap} provides the possibility to give a properties file that can be stored outside of your project.
To use this functionality one can give the properties file in the `${docNameCap}Configuration` of the build file, like this:

```groovy
${docNameCap}Configuration{
    toolConfigurationPath 'toolConfiguration.xml'
    propertiesFilePath '/path/to/antenna.properties'
}
```

The properties file can be the normal gradle.properties file.
It should be written in the standard properties format:

```
ExampleUsername=maxMustermann
ExamplePassword=12345password
```

Within your `toolConfiguration.xml` and also the `workflow.xml` you can then reference variables by the usual xml standard `${ExampleUsername}`.
This will get rendered by the `TemplateRenderer` according to the value you assigned to the key in the secrets file.

Note: You should still refrain from using key names containing dots, as the `TemplateRenderer` will not render them correctly.

#[[####]]# System environment variables

Additionally you can use system environment variables that you have either set in the environment or when executing the analyze command:

```
SECRET=password12345 gradle analyze
```

Should you execute it within the command, the variable will not be saved in your environment but only exist for the run of the command.
${docNameCap} adheres to standards and only renders environment variables that are written in upper case letters.