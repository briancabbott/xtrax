# How to use ${docNameCap} from the Command Line

${docNameCap} is also available as a standalone Java jar file, enabling ${docNameCap} to
be used as a plain CLI tool. Although it is built from the same sources 
as the Maven plugin version, a few differences must be kept in mind when 
using the CLI frontend.

#[[##]]# Configuring

${docNameCap} CLI reads a [Tool Configuration](../tool-configuration.html) file (toolConfiguration.xml) that has the same structure as the Maven plugin.
However, the CLI understands this file only as plain XML and not as a Maven pom.
This means that some functionality provided by Maven cannot be relied upon.

Here are some pointers on writing a configuration file for ${docNameCap} CLI:

* Unlike the Maven plugin frontend, the CLI frontend won't copy the 
project's artifacts into place, so your `<scan.patterns>` section
must describe the original locations of your source artifacts.

* All paths must be absolute.

* For technical reasons variables / properties containing dots or hyphens will in general not be rendered correctly in the toolConfiguration.xml

    * No Maven variables can be used (except for `project.build.directory`, `project.build.outputDirectory` and `project.basedir`, since they have been added to the context).

    * Properties with a dot in them, like `${system.password}` or hyphen, like `${system-password}` should be changed to `${systemPassword}` in order to be rendered.

#[[##]]# Running

You can run the CLI jar file in the usual way. However, some properties
need setting up correctly before doing this. 

Here's an example shell script:
  
```sh
#!/usr/bin/env bash
#
# Add your configuration here
#

# Location of main ${docNameCap} jar file
${docNameAllCap}_JAR=/path/to/${docName}.jar

# Location of custom disclosure document jar file
DISCLOSURE_DOCUMENT_JAR=

# toolConfiguration.xml file for your project
TOOL_CONF_FILE=osmi-configuration/toolConfiguration.xml

#
# Run ${docNameCap}
#

# Put these together on the classpath and run ${docNameCap}
CLASSPATH=$${docNameAllCap}_JAR:$DISCLOSURE_DOCUMENT_JAR
java -cp $CLASSPATH $${antennaCliJavaFilename} $TOOL_CONF_FILE
```

And the equivalent batch script:

```bat
@echo off

REM Add your configuration here

REM Location of main ${docNameCap} jar file
SET ${docNameAllCap}_JAR=c:\path\to\ ${docName}.jar

REM toolConfiguration.xml file for your project
SET TOOL_CONF_FILE=osmi-configuration\toolConfiguration.xml

REM Run ${docNameCap}
SET CLASSPATH=%${docNameAllCap}_JAR%
java -cp %CLASSPATH% %${antennaCliJavaFilename}% %TOOL_CONF_FILE%
```

Alternatively ${docNameCap} can be run over the command line with this simple line:

```
java -jar path\to\ ${docName}.jar path\to\toolConfiguration.xml
```

#[[##]]# Adding workflow steps and plugins

It is possible to use workflow steps, knowledge-bases, etc. also if they are not referenced in the assembly.
To do this, the jars need to be added to the classpath.
If you have a custom plugin `my-custom-plugin` where the jar can be found at `$MY_CUSTOM_PLUGIN_JAR`, then simply add
```sh
CLASSPATH=$ANTENNA_JAR:$MY_CUSTOM_PLUGIN_JAR
java -cp %CLASSPATH% $${antennaCliJavaFilename} %TOOL_CONF_FILE%
```
in the script above.

The same is true for bat scripts on Windows.

#[[##]]# Adding entry values over system environment variables

Sometimes a workflow step contains entries with variables that are credentials or should remain secret due to other reasons.

You can use system environment variables that you have either set in the environment or when executing the analyze command:

```
SECRET=password12345 java -jar path\to\ ${docName}.jar path\to\toolConfiguration.xml
```

Should you execute it within the command, the variable will not be saved in your environment but only exist for the run of the command.
${docNameCap} adheres to standards and only renders environment variables that are written in upper case letters.

Within both, your `toolConfiguration.xml` and the `workflow.xml`, you can then reference the variables.